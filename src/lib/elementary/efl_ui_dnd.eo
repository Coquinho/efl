import eina_types;

struct Efl.Ui.Dnd_Event {
   position : Eina.Position2D;
   seat : uint;
   available_types : accessor<string>;
}

struct Efl.Ui.Dnd_Drop_Event {
   dnd : Efl.Ui.Dnd_Event;
   action : string;
}

mixin @beta Efl.Ui.Dnd requires Efl.Object {
   methods {
      drag_start {
         [[Start a drag and drop process at the drag side.
           During dragging, there are three events emitted as belows:
              - EFL_UI_DND_EVENT_DRAG_POS
              - EFL_UI_DND_EVENT_DRAG_ACCEPT
              - EFL_UI_DND_EVENT_DRAG_DONE
         ]]
         params {
            content : Eina.Content @by_ref;
            @in action: string; [[Action when data is transferred]]
            @in seat: uint; [[Specified seat for multiple seats case.]]
         }
         return : Efl.Content;
      }
      drag_cancel {
         [[Cancel the on-going drag]]
         params {
            @in seat: uint; [[Specified seat for multiple seats case.]]
         }
      }
      drop_data_get {
         [[Get the data from the object that has selection]]
         params {
           seat : uint;
           acceptable_types : iterator<string>;
         }
         return : future<Eina.Content> @move;
      }
   }
   events {
      drop,enter : Efl.Ui.Dnd_Event;
      drop,leave : Efl.Ui.Dnd_Event;
      drop,pos : Efl.Ui.Dnd_Event;
      drop,drop : Efl.Ui.Dnd_Event;
      drag,start : void;
      drag,finished : bool;
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.invalidate;
      Efl.Object.finalize;
   }
}
